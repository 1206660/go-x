// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: common.proto

/*
	Package proto is a generated protocol buffer package.

	It is generated from these files:
		common.proto

	It has these top-level messages:
		MsgLogin
		MsgLoginResult
*/
package proto

import proto1 "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type MsgTypeCmd int32

const (
	MsgTypeCmd_UNSPECIFIED MsgTypeCmd = 0
	MsgTypeCmd_Login       MsgTypeCmd = 1
)

var MsgTypeCmd_name = map[int32]string{
	0: "UNSPECIFIED",
	1: "Login",
}
var MsgTypeCmd_value = map[string]int32{
	"UNSPECIFIED": 0,
	"Login":       1,
}

func (x MsgTypeCmd) String() string {
	return proto1.EnumName(MsgTypeCmd_name, int32(x))
}
func (MsgTypeCmd) EnumDescriptor() ([]byte, []int) { return fileDescriptorCommon, []int{0} }

type LoginMode int32

const (
	LoginMode_Default      LoginMode = 0
	LoginMode_CUSTOM_BEGIN LoginMode = 100
)

var LoginMode_name = map[int32]string{
	0:   "Default",
	100: "CUSTOM_BEGIN",
}
var LoginMode_value = map[string]int32{
	"Default":      0,
	"CUSTOM_BEGIN": 100,
}

func (x LoginMode) String() string {
	return proto1.EnumName(LoginMode_name, int32(x))
}
func (LoginMode) EnumDescriptor() ([]byte, []int) { return fileDescriptorCommon, []int{1} }

type LoginError int32

const (
	LoginError_NoErr           LoginError = 0
	LoginError_ErrPassword     LoginError = 1
	LoginError_ErrAccount      LoginError = 2
	LoginError_ErrPlatformSide LoginError = 3
	LoginError_ErrMode         LoginError = 4
	LoginError_ErrDB           LoginError = 5
	LoginError_ErrGateway      LoginError = 6
	LoginError_ErrParams       LoginError = 7
)

var LoginError_name = map[int32]string{
	0: "NoErr",
	1: "ErrPassword",
	2: "ErrAccount",
	3: "ErrPlatformSide",
	4: "ErrMode",
	5: "ErrDB",
	6: "ErrGateway",
	7: "ErrParams",
}
var LoginError_value = map[string]int32{
	"NoErr":           0,
	"ErrPassword":     1,
	"ErrAccount":      2,
	"ErrPlatformSide": 3,
	"ErrMode":         4,
	"ErrDB":           5,
	"ErrGateway":      6,
	"ErrParams":       7,
}

func (x LoginError) String() string {
	return proto1.EnumName(LoginError_name, int32(x))
}
func (LoginError) EnumDescriptor() ([]byte, []int) { return fileDescriptorCommon, []int{2} }

type MsgLogin struct {
	Account  string    `protobuf:"bytes,1,opt,name=Account,proto3" json:"Account,omitempty"`
	Password string    `protobuf:"bytes,2,opt,name=Password,proto3" json:"Password,omitempty"`
	Mode     LoginMode `protobuf:"varint,3,opt,name=Mode,proto3,enum=proto.LoginMode" json:"Mode,omitempty"`
	Userdata []byte    `protobuf:"bytes,4,opt,name=Userdata,proto3" json:"Userdata,omitempty"`
}

func (m *MsgLogin) Reset()                    { *m = MsgLogin{} }
func (m *MsgLogin) String() string            { return proto1.CompactTextString(m) }
func (*MsgLogin) ProtoMessage()               {}
func (*MsgLogin) Descriptor() ([]byte, []int) { return fileDescriptorCommon, []int{0} }

func (m *MsgLogin) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *MsgLogin) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *MsgLogin) GetMode() LoginMode {
	if m != nil {
		return m.Mode
	}
	return LoginMode_Default
}

func (m *MsgLogin) GetUserdata() []byte {
	if m != nil {
		return m.Userdata
	}
	return nil
}

type MsgLoginResult struct {
	Err     LoginError `protobuf:"varint,1,opt,name=Err,proto3,enum=proto.LoginError" json:"Err,omitempty"`
	Token   string     `protobuf:"bytes,2,opt,name=Token,proto3" json:"Token,omitempty"`
	Address string     `protobuf:"bytes,3,opt,name=Address,proto3" json:"Address,omitempty"`
}

func (m *MsgLoginResult) Reset()                    { *m = MsgLoginResult{} }
func (m *MsgLoginResult) String() string            { return proto1.CompactTextString(m) }
func (*MsgLoginResult) ProtoMessage()               {}
func (*MsgLoginResult) Descriptor() ([]byte, []int) { return fileDescriptorCommon, []int{1} }

func (m *MsgLoginResult) GetErr() LoginError {
	if m != nil {
		return m.Err
	}
	return LoginError_NoErr
}

func (m *MsgLoginResult) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *MsgLoginResult) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func init() {
	proto1.RegisterType((*MsgLogin)(nil), "proto.MsgLogin")
	proto1.RegisterType((*MsgLoginResult)(nil), "proto.MsgLoginResult")
	proto1.RegisterEnum("proto.MsgTypeCmd", MsgTypeCmd_name, MsgTypeCmd_value)
	proto1.RegisterEnum("proto.LoginMode", LoginMode_name, LoginMode_value)
	proto1.RegisterEnum("proto.LoginError", LoginError_name, LoginError_value)
}
func (m *MsgLogin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgLogin) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Account) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Account)))
		i += copy(dAtA[i:], m.Account)
	}
	if len(m.Password) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Password)))
		i += copy(dAtA[i:], m.Password)
	}
	if m.Mode != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.Mode))
	}
	if len(m.Userdata) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Userdata)))
		i += copy(dAtA[i:], m.Userdata)
	}
	return i, nil
}

func (m *MsgLoginResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgLoginResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Err != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.Err))
	}
	if len(m.Token) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	if len(m.Address) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Address)))
		i += copy(dAtA[i:], m.Address)
	}
	return i, nil
}

func encodeVarintCommon(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *MsgLogin) Size() (n int) {
	var l int
	_ = l
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Mode != 0 {
		n += 1 + sovCommon(uint64(m.Mode))
	}
	l = len(m.Userdata)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	return n
}

func (m *MsgLoginResult) Size() (n int) {
	var l int
	_ = l
	if m.Err != 0 {
		n += 1 + sovCommon(uint64(m.Err))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	return n
}

func sovCommon(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCommon(x uint64) (n int) {
	return sovCommon(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgLogin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgLogin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgLogin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			m.Mode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mode |= (LoginMode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userdata", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userdata = append(m.Userdata[:0], dAtA[iNdEx:postIndex]...)
			if m.Userdata == nil {
				m.Userdata = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgLoginResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgLoginResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgLoginResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			m.Err = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Err |= (LoginError(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCommon(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCommon
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCommon
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCommon(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCommon = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCommon   = fmt.Errorf("proto: integer overflow")
)

func init() { proto1.RegisterFile("common.proto", fileDescriptorCommon) }

var fileDescriptorCommon = []byte{
	// 372 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0xcf, 0xae, 0x12, 0x31,
	0x14, 0xc6, 0xa7, 0x17, 0xe6, 0x72, 0xe7, 0x80, 0x43, 0xad, 0x2e, 0x26, 0x2e, 0x26, 0x04, 0x5d,
	0x4c, 0x66, 0xc1, 0x02, 0x9f, 0x40, 0xa0, 0x12, 0x12, 0x07, 0xc9, 0x00, 0x6b, 0x53, 0x69, 0x21,
	0x44, 0x66, 0x4a, 0x4e, 0x87, 0x10, 0xb6, 0xc6, 0x07, 0xf0, 0xb1, 0x5c, 0xfa, 0x08, 0x06, 0x5f,
	0xc4, 0xb4, 0xfc, 0xf1, 0xae, 0x9a, 0xaf, 0xa7, 0xfd, 0x7d, 0xdf, 0xf9, 0xa0, 0xb5, 0xd2, 0x45,
	0xa1, 0xcb, 0xde, 0x1e, 0x75, 0xa5, 0x99, 0xef, 0x8e, 0xee, 0x77, 0x02, 0x4f, 0x99, 0xd9, 0x7c,
	0xd2, 0x9b, 0x6d, 0xc9, 0x22, 0x68, 0x7c, 0x58, 0xad, 0xf4, 0xa1, 0xac, 0x22, 0xd2, 0x21, 0x49,
	0x90, 0xdf, 0x24, 0x7b, 0x03, 0x4f, 0x33, 0x61, 0xcc, 0x51, 0xa3, 0x8c, 0x1e, 0xdc, 0xe8, 0xae,
	0xd9, 0x3b, 0xa8, 0x67, 0x5a, 0xaa, 0xa8, 0xd6, 0x21, 0x49, 0xd8, 0xa7, 0x17, 0x7e, 0xcf, 0x11,
	0xed, 0x7d, 0xee, 0xa6, 0x96, 0xb0, 0x34, 0x0a, 0xa5, 0xa8, 0x44, 0x54, 0xef, 0x90, 0xa4, 0x95,
	0xdf, 0x75, 0x57, 0x41, 0x78, 0xcb, 0x90, 0x2b, 0x73, 0xd8, 0x55, 0xec, 0x2d, 0xd4, 0x38, 0xa2,
	0x4b, 0x11, 0xf6, 0x5f, 0x3e, 0x47, 0x72, 0x44, 0x8d, 0xb9, 0x9d, 0xb2, 0xd7, 0xe0, 0x2f, 0xf4,
	0x37, 0x55, 0x5e, 0x13, 0x5d, 0x84, 0x5b, 0x42, 0x4a, 0x54, 0xc6, 0xb8, 0x44, 0x76, 0x89, 0x8b,
	0x4c, 0x13, 0x80, 0xcc, 0x6c, 0x16, 0xa7, 0xbd, 0x1a, 0x16, 0x92, 0xb5, 0xa1, 0xb9, 0x9c, 0xce,
	0x67, 0x7c, 0x38, 0xf9, 0x38, 0xe1, 0x23, 0xea, 0xb1, 0x00, 0x7c, 0xe7, 0x40, 0x49, 0x9a, 0x42,
	0x70, 0xcf, 0xcf, 0x9a, 0xd0, 0x18, 0xa9, 0xb5, 0x38, 0xec, 0x2a, 0xea, 0x31, 0x0a, 0xad, 0xe1,
	0x72, 0xbe, 0xf8, 0x9c, 0x7d, 0x19, 0xf0, 0xf1, 0x64, 0x4a, 0x65, 0xfa, 0x83, 0x00, 0xfc, 0x4f,
	0x66, 0x29, 0x53, 0xcd, 0x11, 0xa9, 0x67, 0x1d, 0x38, 0xe2, 0xad, 0x27, 0x4a, 0x58, 0x08, 0xc0,
	0x11, 0xaf, 0x9d, 0xd2, 0x07, 0xf6, 0x0a, 0xda, 0xf6, 0xc1, 0x4e, 0x54, 0x6b, 0x8d, 0xc5, 0x7c,
	0x2b, 0x15, 0xad, 0x59, 0x3b, 0x8e, 0x68, 0x9d, 0x69, 0xdd, 0xd2, 0x38, 0xe2, 0x68, 0x40, 0xfd,
	0xeb, 0xe7, 0xb1, 0xa8, 0xd4, 0x51, 0x9c, 0xe8, 0x23, 0x7b, 0x01, 0x81, 0xa3, 0xa3, 0x28, 0x0c,
	0x6d, 0x0c, 0xe8, 0xaf, 0x73, 0x4c, 0x7e, 0x9f, 0x63, 0xf2, 0xe7, 0x1c, 0x93, 0x9f, 0x7f, 0x63,
	0xef, 0xeb, 0xa3, 0x6b, 0xed, 0xfd, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xba, 0x9f, 0x65, 0x0e,
	0xf8, 0x01, 0x00, 0x00,
}
