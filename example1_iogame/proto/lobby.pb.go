// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lobby.proto

/*
	Package lobbymsg is a generated protocol buffer package.

	It is generated from these files:
		lobby.proto

	It has these top-level messages:
		EnumPlayerBaseInfo
		MsgPlayerBaseInfo
		MsgPlayerBaseInfoResult
*/
package lobbymsg

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type MsgTypeCmd int32

const (
	MsgTypeCmd_UNSPECIFIED    MsgTypeCmd = 0
	MsgTypeCmd_PlayerBaseInfo MsgTypeCmd = 10001
)

var MsgTypeCmd_name = map[int32]string{
	0:     "UNSPECIFIED",
	10001: "PlayerBaseInfo",
}
var MsgTypeCmd_value = map[string]int32{
	"UNSPECIFIED":    0,
	"PlayerBaseInfo": 10001,
}

func (x MsgTypeCmd) String() string {
	return proto.EnumName(MsgTypeCmd_name, int32(x))
}
func (MsgTypeCmd) EnumDescriptor() ([]byte, []int) { return fileDescriptorLobby, []int{0} }

type EnumPlayerBaseInfo_Error int32

const (
	EnumPlayerBaseInfo_NoErr EnumPlayerBaseInfo_Error = 0
	EnumPlayerBaseInfo_ErrDB EnumPlayerBaseInfo_Error = 1
)

var EnumPlayerBaseInfo_Error_name = map[int32]string{
	0: "NoErr",
	1: "ErrDB",
}
var EnumPlayerBaseInfo_Error_value = map[string]int32{
	"NoErr": 0,
	"ErrDB": 1,
}

func (x EnumPlayerBaseInfo_Error) String() string {
	return proto.EnumName(EnumPlayerBaseInfo_Error_name, int32(x))
}
func (EnumPlayerBaseInfo_Error) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorLobby, []int{0, 0}
}

type EnumPlayerBaseInfo struct {
}

func (m *EnumPlayerBaseInfo) Reset()                    { *m = EnumPlayerBaseInfo{} }
func (m *EnumPlayerBaseInfo) String() string            { return proto.CompactTextString(m) }
func (*EnumPlayerBaseInfo) ProtoMessage()               {}
func (*EnumPlayerBaseInfo) Descriptor() ([]byte, []int) { return fileDescriptorLobby, []int{0} }

type MsgPlayerBaseInfo struct {
}

func (m *MsgPlayerBaseInfo) Reset()                    { *m = MsgPlayerBaseInfo{} }
func (m *MsgPlayerBaseInfo) String() string            { return proto.CompactTextString(m) }
func (*MsgPlayerBaseInfo) ProtoMessage()               {}
func (*MsgPlayerBaseInfo) Descriptor() ([]byte, []int) { return fileDescriptorLobby, []int{1} }

type MsgPlayerBaseInfoResult struct {
	Err  EnumPlayerBaseInfo_Error `protobuf:"varint,1,opt,name=Err,proto3,enum=lobbymsg.EnumPlayerBaseInfo_Error" json:"Err,omitempty"`
	Name string                   `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (m *MsgPlayerBaseInfoResult) Reset()                    { *m = MsgPlayerBaseInfoResult{} }
func (m *MsgPlayerBaseInfoResult) String() string            { return proto.CompactTextString(m) }
func (*MsgPlayerBaseInfoResult) ProtoMessage()               {}
func (*MsgPlayerBaseInfoResult) Descriptor() ([]byte, []int) { return fileDescriptorLobby, []int{2} }

func (m *MsgPlayerBaseInfoResult) GetErr() EnumPlayerBaseInfo_Error {
	if m != nil {
		return m.Err
	}
	return EnumPlayerBaseInfo_NoErr
}

func (m *MsgPlayerBaseInfoResult) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*EnumPlayerBaseInfo)(nil), "lobbymsg.EnumPlayerBaseInfo")
	proto.RegisterType((*MsgPlayerBaseInfo)(nil), "lobbymsg.MsgPlayerBaseInfo")
	proto.RegisterType((*MsgPlayerBaseInfoResult)(nil), "lobbymsg.MsgPlayerBaseInfoResult")
	proto.RegisterEnum("lobbymsg.MsgTypeCmd", MsgTypeCmd_name, MsgTypeCmd_value)
	proto.RegisterEnum("lobbymsg.EnumPlayerBaseInfo_Error", EnumPlayerBaseInfo_Error_name, EnumPlayerBaseInfo_Error_value)
}
func (m *EnumPlayerBaseInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnumPlayerBaseInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *MsgPlayerBaseInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPlayerBaseInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *MsgPlayerBaseInfoResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPlayerBaseInfoResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Err != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLobby(dAtA, i, uint64(m.Err))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintLobby(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func encodeFixed64Lobby(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Lobby(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintLobby(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *EnumPlayerBaseInfo) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *MsgPlayerBaseInfo) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *MsgPlayerBaseInfoResult) Size() (n int) {
	var l int
	_ = l
	if m.Err != 0 {
		n += 1 + sovLobby(uint64(m.Err))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovLobby(uint64(l))
	}
	return n
}

func sovLobby(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozLobby(x uint64) (n int) {
	return sovLobby(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EnumPlayerBaseInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnumPlayerBaseInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnumPlayerBaseInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPlayerBaseInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPlayerBaseInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPlayerBaseInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPlayerBaseInfoResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPlayerBaseInfoResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPlayerBaseInfoResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			m.Err = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Err |= (EnumPlayerBaseInfo_Error(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLobby
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLobby(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLobby
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLobby(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLobby
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLobby
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthLobby
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowLobby
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipLobby(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthLobby = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLobby   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("lobby.proto", fileDescriptorLobby) }

var fileDescriptorLobby = []byte{
	// 224 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xce, 0xc9, 0x4f, 0x4a,
	0xaa, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x00, 0x73, 0x72, 0x8b, 0xd3, 0x95, 0x8c,
	0xb9, 0x84, 0x5c, 0xf3, 0x4a, 0x73, 0x03, 0x72, 0x12, 0x2b, 0x53, 0x8b, 0x9c, 0x12, 0x8b, 0x53,
	0x3d, 0xf3, 0xd2, 0xf2, 0x95, 0x64, 0xb9, 0x58, 0x5d, 0x8b, 0x8a, 0xf2, 0x8b, 0x84, 0x38, 0xb9,
	0x58, 0xfd, 0xf2, 0x5d, 0x8b, 0x8a, 0x04, 0x18, 0x40, 0x4c, 0xd7, 0xa2, 0x22, 0x17, 0x27, 0x01,
	0x46, 0x25, 0x61, 0x2e, 0x41, 0xdf, 0xe2, 0x74, 0x34, 0x3d, 0xc9, 0x5c, 0xe2, 0x18, 0x82, 0x41,
	0xa9, 0xc5, 0xa5, 0x39, 0x25, 0x42, 0x26, 0x5c, 0xcc, 0xae, 0x45, 0x45, 0x12, 0x8c, 0x0a, 0x8c,
	0x1a, 0x7c, 0x46, 0x4a, 0x7a, 0x30, 0xcb, 0xf5, 0x30, 0x6d, 0xd6, 0x03, 0x5b, 0x1b, 0x04, 0x52,
	0x2e, 0x24, 0xc4, 0xc5, 0xe2, 0x97, 0x98, 0x9b, 0x2a, 0xc1, 0xa4, 0xc0, 0xa8, 0xc1, 0x19, 0x04,
	0x66, 0x6b, 0x19, 0x71, 0x71, 0xf9, 0x16, 0xa7, 0x87, 0x54, 0x16, 0xa4, 0x3a, 0xe7, 0xa6, 0x08,
	0xf1, 0x73, 0x71, 0x87, 0xfa, 0x05, 0x07, 0xb8, 0x3a, 0x7b, 0xba, 0x79, 0xba, 0xba, 0x08, 0x30,
	0x08, 0x09, 0x73, 0xf1, 0xa1, 0x9a, 0x27, 0x30, 0xd1, 0xcf, 0x49, 0xe0, 0xc4, 0x23, 0x39, 0xc6,
	0x0b, 0x8f, 0xe4, 0x18, 0x1f, 0x3c, 0x92, 0x63, 0x9c, 0xf0, 0x58, 0x8e, 0x21, 0x89, 0x0d, 0x1c,
	0x0a, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x77, 0xb7, 0xf9, 0x3c, 0x14, 0x01, 0x00, 0x00,
}
